🔷 1. 샤드키(Shard Key)가 뭐야?
샤드키는 데이터를 여러 개의 **샤드(shard, 조각)**로 분산해서 저장하거나 처리할 때 기준이 되는 키야.

쉽게 말하면:

“어떤 기준으로 데이터를 나눌까?”
그 기준이 되는 값이 샤드키야.

🔷 2. 왜 샤드키가 필요한가?
예를 들어 Outbox 데이터를 여러 개의 큐나 테이블, Redis 채널, DB 파티션 등으로 나눠서 처리한다고 해보자.

이때 샤드키가 없으면:

모든 이벤트를 한 곳에서 처리해야 하니까 병목이 생김.

처리 속도 느리고, 확장성 떨어짐.

하지만 샤드키를 기준으로 데이터를 나누면:

여러 워커(consumer)가 동시에 각자 맡은 부분만 병렬 처리할 수 있어!

즉, 부하 분산 + 확장성 증가

🔷 3. 너의 코드에서 샤드키가 하는 일

shardKey % MessageRelayConstants.SHARD_COUNT
예를 들어 MessageRelayConstants.SHARD_COUNT = 4이면
→ 총 4개의 물리적인 outbox consumer(worker, 큐 등)이 있다고 보면 돼.

그리고 shardKey = boardId니까:
→ 같은 boardId를 가진 이벤트는 항상 같은 샤드(큐, 워커)에 들어감.

즉,

"같은 게시판(boardId)의 이벤트는 같은 큐(혹은 워커)가 처리하게 만든다"

🔷 4. 왜 boardId를 샤드키로 쓴 거야?
이건 도메인 설계 관점인데:

게시판 단위로 병렬 처리하려는 의도야.

boardId로 나누면 같은 게시판의 이벤트는 순서 보장이 가능하고,

서로 다른 게시판은 병렬로 처리 가능.

게시판 A는 워커 1에서 처리
게시판 B는 워커 2에서 처리
→ 동시에 가능, 부하 분산 OK

✅ 한 줄 요약
샤드키는 이벤트나 데이터를 여러 처리 단위로 분산시키기 위한 기준 값이야.
boardId를 사용함으로써 같은 게시판의 이벤트 순서를 유지하면서,
게시판 간 병렬 처리를 가능하게 한 거야.

